@page "/"
@using Wallet.NET.Models
@using Wallet.NET.Services.Indices
@using Wallet.NET.Services.News

@inject IIndexService IndexService
@inject INewsService NewsService

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Bem-vindo ao Wallet.NET</MudText>
<MudText Class="mb-8">Gerencie suas ações e mantenha-se atualizado com as últimas notícias do mercado.</MudText>

<MudText Typo="Typo.h5" GutterBottom="true">Principais Índices</MudText>
@if (!string.IsNullOrEmpty(IndicesErrorMessage))
{
    <MudAlert Severity="Severity.Error">@IndicesErrorMessage</MudAlert>
}
else
{
    <MudList T="IndexInfo">
        @if (indices != null)
        {
            foreach (var index in indices)
            {
                <MudListItem T="IndexInfo">
                    <MudText Typo="Typo.body1">@index.Name: @index.Value (@index.DailyChange)</MudText>
                </MudListItem>
            }
        }
        else
        {
            <MudText>Carregando índices...</MudText>
        }
    </MudList>
}

<MudDivider />

<MudText Typo="Typo.h5" GutterBottom="true">Principais Notícias</MudText>
@if (!string.IsNullOrEmpty(NewsErrorMessage))
{
    <MudAlert Severity="Severity.Error">@NewsErrorMessage</MudAlert>
}
else
{
    <MudList T="NewsArticle">
        @if (newsArticles != null)
        {
            foreach (var article in newsArticles)
            {
                <MudListItem T="NewsArticle">
                    <MudText Typo="Typo.body1"><MudLink Href="@article.Link" Target="_blank">@article.Title</MudLink></MudText>
                </MudListItem>
            }
        }
        else
        {
            <MudText>Carregando notícias...</MudText>
        }
    </MudList>
}

@code {
    private List<IndexInfo>? indices;
    private List<NewsArticle>? newsArticles;
    private string? IndicesErrorMessage;
    private string? NewsErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadIndicesAsync();
        await LoadNewsAsync();
    }

    private async Task LoadIndicesAsync()
    {
        try
        {
            indices = await IndexService.GetIndicesInfoAsync();
        }
        catch (Exception ex)
        {
            IndicesErrorMessage = "Erro ao carregar índices: " + ex.Message;
        }
    }

    private async Task LoadNewsAsync()
    {
        try
        {
            newsArticles = await NewsService.GetAllNewsArticlesAsync();
        }
        catch (Exception ex)
        {
            NewsErrorMessage = "Erro ao carregar notícias: " + ex.Message;
        }
    }
}
